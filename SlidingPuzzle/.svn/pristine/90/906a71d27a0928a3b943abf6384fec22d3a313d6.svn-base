int[] puzzle = new int[4];int[] game = {		1, 2, 0, 3};puzzle = game;
for (int i = 0; i < puzzle.length; i++){	if (puzzle[i] == 0){		System.out.println("\n" + i);	}		}	double l = 4;int width = (int) Math.sqrt(l);System.out.println(width);System.out.println("Element at index 0: "
        + puzzle[0]);
System.out.println("Element at index 1: "
        + puzzle[1]);
System.out.println("Element at index 2: "
        + puzzle[2]);
System.out.println("Element at index 3: "
        + puzzle[3]);
System.out.print(puzzle.length);int i = 0;System.out.println(i);int x = 10;int y = 11;if (x < y) {	System.out.println();}int[] a = new int[10];System.out.print(a[8]);//Creates new instance of variable to be returnedSimplePuzzleState s1 = new SimplePuzzleState();s1.puzzle = this.getState();s1.parent = this.getParent();s1.prevOp = this.getOperation();int blankIndex = Arrays.asList(s1.getState()).indexOf(0); //blank values indexint otherValIndex = (Arrays.asList(s1.getState()).indexOf(0)) - 3; //index of value to be switched int otherVal = this.puzzle[otherValIndex]; //the actual value to be switched//THE switchs1.puzzle[otherValIndex] = 0; s1.puzzle[blankIndex] = otherVal;public int[] getPuzzle() {	return puzzle;}public void setPuzzle(int[] puzzle) {	this.puzzle = puzzle;}public Operation getPrevOp() {	return prevOp;}public void setPrevOp(Operation prevOp) {	this.prevOp = prevOp;}public int getDist() {	return Dist;}public void setDist(int dist) {	Dist = dist;}@Override/** Allows to configure the puzzle state to a particular game state.  * The state is provided as an array of integer. For instance, an  * one dimensional integer array {0,1,3,2} represents a state of 2x2  * puzzle with the first row carrying values 0 and 1, the second row  * carrying values 3 and 2. * @param gameState Provides a value for each tile in the current state of the game. */public void setState(int[] gameState) 	{	puzzle = gameState; 	}@Override/** Get the current puzzle state in a single dimensional array  * (i.e. {0,1,3,2} for 2x2 puzzle). Blank tile is represented as 0.  * The coding goes by rows, for the example the top row contains  * values 0 and 1 from left to right. This method is symmetric to  * setState and returns an array of same content that was assigned  * with the setState method. * @return the gamestate set in setState */public int[] getState() {		return puzzle;}@Override/**Get the parent state which was previously set with the setParentState *  method. The parent state is useful if one wants to represent that a  *  puzzle state A moves to puzzle state B with a particular move operation.  *  For this example B.getParentState() returns A. Obtaining A is useful  *  to extract a path from a starting state to a final state once the  *  final state is reached. *  @return Returns the parent of the current state. */public PuzzleState getParent() {		return parent;}@Override/** Sets the parent state. * @param parentState */public void setParent(PuzzleState parentState) {		parent = parentState;	}@Override/** Sets the operation to achieve this state * @param op The last operation */public void setOperation(Operation op) {		this.prevOp = op;}@Override/** Returns the operation last used to achieve this state * @return op - the last operation */public Operation getOperation() {		return this.prevOp;}@Override/** Set distance from initial state. The initial state  * has distance 0, states that are reached with one  * move have distance one and so forth * @param distance The distance from the initial state */public void setDistance(int distance) {		this.Dist = distance;}@Override/** Get distance from initial state * @returns distance from the intitial state */public int getDistance() {		return this.Dist;}PuzzleState pState= new SimplePuzzleState();int[] easyPuz = {1, 2, 0, 3};pState.setState(easyPuz);pState.moveUp();pState.moveRight();pState.moveDown();pState.moveLeft();SimplePuzzleState s = new SimplePuzzleState();s.setParent(pState);s.setDistance(pState.getDistance()); s.setOperation(pState.prevOp);s.setState(pState.getState());int blank = s.getZeroNdx(s.getState()); //gets the zero indexint width = s.getWidth();int row = s.getRowNdx(blank, width); //gets the row indexint col = s.getColNdx(blank, width); //gets the column indexSystem.out.println("("+ col + ", " + row + ")");int ogNdx = col + (width*(row - 1)); //index of the value above the zeroint switchVal = s.getState()[ogNdx]; //Value of the space above the zeros.getState()[ogNdx] = 0;s.getParent();s.getState()[blank] = switchVal;s.setDistance(s.getDistance() + 1);s.getParent();