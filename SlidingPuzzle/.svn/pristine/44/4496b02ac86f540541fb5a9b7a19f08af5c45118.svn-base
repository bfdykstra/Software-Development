package edu.wm.cs.cs301.slidingpuzzle;

import java.util.Comparator;
import java.util.PriorityQueue;

import edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation;

public class AStarSolver implements PuzzleSolver {

	
	private PuzzleState initState ; //field for the initial state
	private static PuzzleState goalState ; //field for the goal state
	
	public AStarSolver() {
		initState = new SimplePuzzleState();
		goalState = new SimplePuzzleState();
		
	}

	@Override
	/**
	 * Configures the solver with initial and goal states. As interfaces 
	 * do not allow for the specification of a constructor. A default 
	 * constructor with no parameters is assumed and the configure method 
	 * is used to clarify what is necessary to properly initialize/configure 
	 * an object of a class that implements the PuzzleSolver interface. 
	 * The initial and goal states also implicitly carry information on 
	 * the puzzles dimension (i.e. number of rows). The states are provided 
	 * as an array of integer. For Instance, an one dimensional integer 
	 * array {0,1,3,2} represents a state of 2x2 puzzle with top row values 
	 * of 0 and 1, bottom row values of 3 and 2. The puzzle solver will be 
	 * provided with two one dimensional integer arrays, initial and goal, 
	 * representing the initial and goal state of the puzzle.
	 * @param initial Initial state represented as single dimensional 
	 * array(i.e. {0,1,3,2} for 2x2 puzzle).
	 * Blank state is represented as 0.
	 * @param goal Goal state represented as single dimensional array(i.e. {0,1,3,2} 
	 * for 2x2 puzzle).
	 * Blank state is represented as 0.
	 * @return Return true on successful configuration. false otherwise.
	 */
	public boolean configure(int[] initial, int[] goal){
		
		if (initial == null || goal == null) {
			return false;
		}
		
		initState.setState(initial);
		goalState.setState(goal);
		return true; 
	}
	
	public static Comparator<PuzzleState> Distance = new Comparator<PuzzleState>(){
		
		private int getRowNdx(int index, int width) {
			
			int y = index/width;
			
			return y;		
		}
		
		/**gets the col index in 2d view
		 * 
		 * @param index the index from the 1d array in question
		 * @return x the x-coordinate 
		 */
		private int getColNdx(int index, int width) {
			
			int x = index % width;
			
			return x;		
		}
		
		/** Gets what would be the width of a square grid.
		 * Does so by taking the square root of the length of the array.
		 * 
		 * @return width of 2d array
		 */
		private int getWidth(int[] puz) {
			
			double l = puz.length;
			int width = (int) Math.sqrt(l);
			return width;
			
		}
		
		private int manhattanDist(PuzzleState iState, PuzzleState goalState){
			int[] i = iState.getState();
			int[] g = goalState.getState();
			
			int totalDist = 0;
			int width = this.getWidth(i);
			
			int f = 0;
			int h = 0;
			for(h = 0; h < i.length; h++){
				//find value in initial and its corresponding value in goal
				// h is index value in initial, f is index value in goal
				int firstVal = i[h];
				for (f = 0; f < i.length; f++){
					if (g[f] == firstVal){
						
						//need to calculate row and col ndx now
						int rowInit = this.getRowNdx(h, width);
						int rowGoal = this.getRowNdx(f, width);
						
						int colInit = this.getColNdx(h, width);
						int colGoal = this.getColNdx(f, width);
						
						int valDist = Math.abs(rowInit - rowGoal) + Math.abs(colInit - colGoal);
						
						totalDist = valDist + totalDist;
					}
				}
			}
			return totalDist;
			
		}
		
		@Override
		//
		public int compare( PuzzleState iState, PuzzleState gState){
			int totalDist = this.manhattanDist(iState, goalState) + iState.getDistance();
			return totalDist;
		}
	};
	
	
	@Override
	public Operation[] movesToSolve() {
		
		PriorityQueue<PuzzleState> toDo = new PriorityQueue<PuzzleState>(1, Distance);
		
		
		return null;
	}

	@Override
	/**
	 * Gets the initial state of the puzzle
	 */
	public PuzzleState getSolverInitialState() {
		
		return initState;
	}

	@Override
	/**
	 * Gets the final desired state
	 */
	public PuzzleState getSolverFinalState() {
		
		return goalState;
	}

	@Override
	public int getNumberOfStatesExplored() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getMaxSizeOfQueue() {
		int n = initState.getState().length;
	    int result = 1;
	    for (int i = 1; i <= n; i++) {
	    	result = result * i;
	    	}
		return result;
	}
	
	/**gets the row index in 2d view
	 * 
	 * @param index the index from the 1d array in question
	 * @return y the y-coordinate 
	 */
	private int getRowNdx(int index, int width) {
		
		int y = index/width;
		
		return y;		
	}
	
	/**gets the col index in 2d view
	 * 
	 * @param index the index from the 1d array in question
	 * @return x the x-coordinate 
	 */
	private int getColNdx(int index, int width) {
		
		int x = index % width;
		
		return x;		
	}
	
	/** Gets what would be the width of a square grid.
	 * Does so by taking the square root of the length of the array.
	 * 
	 * @return width of 2d array
	 */
	private int getWidth(int[] puz) {
		
		double l = puz.length;
		int width = (int) Math.sqrt(l);
		return width;
		
	}
	

	private int manhattanDist(PuzzleState iState, PuzzleState gState){
		int[] i = iState.getState();
		int[] g = gState.getState();
		
		int totalDist = 0;
		int width = this.getWidth(i);
		
		int f = 0;
		int h = 0;
		for(h = 0; h < i.length; h++){
			//find value in initial and its corresponding value in goal
			// h is index value in initial, f is index value in goal
			int firstVal = i[h];
			for (f = 0; f < i.length; f++){
				if (g[f] == firstVal){
					
					//need to calculate row and col ndx now
					int rowInit = this.getRowNdx(h, width);
					int rowGoal = this.getRowNdx(f, width);
					
					int colInit = this.getColNdx(h, width);
					int colGoal = this.getColNdx(f, width);
					
					int valDist = Math.abs(rowInit - rowGoal) + Math.abs(colInit - colGoal);
					
					totalDist = valDist + totalDist;
				}
			}
		}
		return totalDist;
		
	}
	
	
	

}
