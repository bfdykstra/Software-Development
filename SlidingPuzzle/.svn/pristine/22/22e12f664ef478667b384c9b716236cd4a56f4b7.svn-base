package edu.wm.cs.cs301.slidingpuzzle;

import java.util.Arrays;

public class SimplePuzzleState implements PuzzleState {
	
	private int[] puzzle; // a parameter to store the values of the puzzle
	private PuzzleState parent; // a parameter that will store the parent of a puzzle
	private Operation prevOp; // a parameter to store the previous operation that was used
	private int Dist; // a parameter to store the distance from the initial state
	
	// constructors. 
	public SimplePuzzleState() {
		puzzle = null;
		parent = null;
		prevOp = null;
		Dist = 0;
	}

	@Override
	/** Allows to configure the puzzle state to a particular game state. 
	 * The state is provided as an array of integer. For instance, an 
	 * one dimensional integer array {0,1,3,2} represents a state of 2x2 
	 * puzzle with the first row carrying values 0 and 1, the second row 
	 * carrying values 3 and 2.
	 * @param gameState Provides a value for each tile in the current state of the game.
	 */
	public void setState(int[] gameState) 
		
	{
		this.puzzle = gameState; 
		
	}

	@Override
	/** Get the current puzzle state in a single dimensional array 
	 * (i.e. {0,1,3,2} for 2x2 puzzle). Blank tile is represented as 0. 
	 * The coding goes by rows, for the example the top row contains 
	 * values 0 and 1 from left to right. This method is symmetric to 
	 * setState and returns an array of same content that was assigned 
	 * with the setState method.
	 * @return the gamestate set in setState
	 */
	public int[] getState() {
		
		return puzzle;
	}

	
	@Override
	/**Get the parent state which was previously set with the setParentState
	 *  method. The parent state is useful if one wants to represent that a 
	 *  puzzle state A moves to puzzle state B with a particular move operation. 
	 *  For this example B.getParentState() returns A. Obtaining A is useful 
	 *  to extract a path from a starting state to a final state once the 
	 *  final state is reached.
	 *  @return Returns the parent of the current state.
	 */
	public PuzzleState getParent() {
		
		return this.parent;
	}
	
	@Override
	/** Sets the parent state.
	 * @param parentState
	 */
	public void setParent(PuzzleState parentState) {
		
		this.parent = parentState;	

	}

	@Override
	/** Sets the operation to achieve this state
	 * @param op The last operation
	 */
	public void setOperation(Operation op) {
		
		this.prevOp = op;

	}

	@Override
	/** Returns the operation last used to achieve this state
	 * @return op - the last operation
	 */
	public Operation getOperation() {
		
		return this.prevOp;
	}

	@Override
	/** Set distance from initial state. The initial state 
	 * has distance 0, states that are reached with one 
	 * move have distance one and so forth
	 * @param distance The distance from the initial state
	 */
	public void setDistance(int distance) {
		
		this.Dist = distance;
	}

	@Override
	/** Get distance from initial state
	 * @returns distance from the intitial state
	 */
	public int getDistance() {
		
		return this.Dist;
	}

	@Override
	/**Compare other puzzle state to current puzzle state.
	 * @param other puzzle state to compare
	 * @returns true if equal and false otherwise
	 * 
	 */
	public boolean equals(PuzzleState other) {
		
		if (Arrays.equals(this.getState(), other.getState())){
			return true;
		}
		return false;
	}

	@Override
	public PuzzleState moveUp() {
		// TODO Auto-generated method stub
		
		//Creates new instance of variable to be returned
		SimplePuzzleState s = createNew();
		int blank = s.getZeroNdx(s.puzzle); //gets the zero index
		int row = s.getRowNdx(blank); //gets the row index
		int col = s.getColNdx(blank); //gets the column index
		
		if( 0 < row && row <= 2){
			int ogNdx = col + (s.getWidth()*(row - 1)); //index of the value above the zero
			int switchVal = s.puzzle[ogNdx]; //Value of the space above the zero
			s.puzzle[ogNdx] = 0;
			s.puzzle[blank] = switchVal;
			s.Dist = s.Dist + 1;
			
			return s;		
		}
		
		return null;
			
	}

	@Override
	public PuzzleState moveDown() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState moveLeft() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState moveRight() {
		// TODO Auto-generated method stub
		return null;
	}
	
	private int getZeroNdx(int[] gameState) {
		
		int i =0;
		for (i = 0; i < gameState.length; i++){
			if (gameState[i] == 0){
				break;
			}
		}
		return i;
	}
	
	private int getRowNdx(int index) {
		
		int width = this.getWidth();
		int y = index/width;
		
		return y;		
	}
	
	private int getColNdx(int index) {
		
		int width = this.getWidth();
		int x = index % width;
		
		return x;		
	}
	
	private int getWidth() {
		
		double l = this.getState().length;
		int width = (int) Math.sqrt(l);
		return width;
		
	}
	
	private SimplePuzzleState createNew() {
		SimplePuzzleState s1 = new SimplePuzzleState();
		s1.puzzle = this.getState();
		s1.parent = this.getParent();
		s1.prevOp = this.getOperation();
		s1.Dist = this.getDistance();
		
		return s1;
	}

}
