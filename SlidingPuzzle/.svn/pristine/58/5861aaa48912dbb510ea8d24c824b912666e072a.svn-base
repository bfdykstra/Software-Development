package edu.wm.cs.cs301.slidingpuzzle;

import java.util.Arrays;

public class SimplePuzzleState implements PuzzleState {
	
	private int[] puzzle; // a parameter to store the values of the puzzle
	private PuzzleState parent; // a parameter that will store the parent of a puzzle
	private Operation prevOp; // a parameter to store the previous operation that was used
	private int Dist; // a parameter to store the distance from the initial state
	
	// constructors. 
	public SimplePuzzleState() {
		puzzle = null;
		parent = null;
		prevOp = null;
		Dist = 0;
	}

	@Override
	/** Allows to configure the puzzle state to a particular game state. 
	 * The state is provided as an array of integer. For instance, an 
	 * one dimensional integer array {0,1,3,2} represents a state of 2x2 
	 * puzzle with the first row carrying values 0 and 1, the second row 
	 * carrying values 3 and 2.
	 * @param gameState Provides a value for each tile in the current state of the game.
	 */
	public void setState(int[] gameState) 
		
	{
		this.puzzle = gameState; 
		
	}

	@Override
	/** Get the current puzzle state in a single dimensional array 
	 * (i.e. {0,1,3,2} for 2x2 puzzle). Blank tile is represented as 0. 
	 * The coding goes by rows, for the example the top row contains 
	 * values 0 and 1 from left to right. This method is symmetric to 
	 * setState and returns an array of same content that was assigned 
	 * with the setState method.
	 * @return the gamestate set in setState
	 */
	public int[] getState() {
		
		return puzzle;
	}

	
	@Override
	/**Get the parent state which was previously set with the setParentState
	 *  method. The parent state is useful if one wants to represent that a 
	 *  puzzle state A moves to puzzle state B with a particular move operation. 
	 *  For this example B.getParentState() returns A. Obtaining A is useful 
	 *  to extract a path from a starting state to a final state once the 
	 *  final state is reached.
	 *  @return Returns the parent of the current state.
	 */
	public PuzzleState getParent() {
		
		return this.parent;
	}
	
	@Override
	/** Sets the parent state.
	 * @param parentState
	 */
	public void setParent(PuzzleState parentState) {
		
		this.parent = parentState;	

	}

	@Override
	/** Sets the operation to achieve this state
	 * @param op The last operation
	 */
	public void setOperation(Operation op) {
		
		this.prevOp = op;

	}

	@Override
	/** Returns the operation last used to achieve this state
	 * @return op - the last operation
	 */
	public Operation getOperation() {
		
		return this.prevOp;
	}

	@Override
	/** Set distance from initial state. The initial state 
	 * has distance 0, states that are reached with one 
	 * move have distance one and so forth
	 * @param distance The distance from the initial state
	 */
	public void setDistance(int distance) {
		
		this.Dist = distance;
	}

	@Override
	/** Get distance from initial state
	 * @returns distance from the intitial state
	 */
	public int getDistance() {
		
		return this.Dist;
	}

	@Override
	/**Compare other puzzle state to current puzzle state.
	 * @param other puzzle state to compare
	 * @returns true if equal and false otherwise
	 * 
	 */
	public boolean equals(PuzzleState other) {
		
		if (Arrays.equals(this.getState(), other.getState())){
			return true;
		}
		return false;
	}

	@Override
	public PuzzleState moveUp() {
		// TODO Auto-generated method stub
		
		//For 3x3 grids
		if (this.getState().length > 4) {
			if ((Arrays.asList(this.getState()).indexOf(0) - 3) >= 0) {
				
				//Creates new instance of variable to be returned
				SimplePuzzleState s1 = new SimplePuzzleState();
				s1.puzzle = this.getState();
				s1.parent = this.getParent();
				s1.prevOp = this.getOperation();
				
				int blankIndex = Arrays.asList(s1.getState()).indexOf(0); //blank values index
				int otherValIndex = (Arrays.asList(s1.getState()).indexOf(0)) - 3; //index of value to be switched 
				int otherVal = this.puzzle[otherValIndex]; //the actual value to be switched
				
				//THE switch
				s1.puzzle[otherValIndex] = 0; 
				s1.puzzle[blankIndex] = otherVal;
				
				return s1;
			}
			else {
				System.out.println("Illegal Move");
				return null;
			}
		}
		
		//For 2x2 grids
		else {
			if ((Arrays.asList(this.getState()).indexOf(0) - 2) >= 0) {
			
				//Creates new instance of variable to be returned
				SimplePuzzleState s1 = new SimplePuzzleState();
				s1.puzzle = this.getState();
				s1.parent = this.getParent();
				s1.prevOp = this.getOperation();
				
				int blankIndex = Arrays.asList(s1.getState()).indexOf(0); //blank values index
				int otherValIndex = (Arrays.asList(s1.getState()).indexOf(0)) - 2; //index of value to be switched 
				int otherVal = this.puzzle[otherValIndex]; //the actual value to be switched
				
				//THE switch
				s1.puzzle[otherValIndex] = 0; 
				s1.puzzle[blankIndex] = otherVal;
				
				return s1;
			}
			else {
				System.out.println("Illegal Move");
				return null;
			}
		}
	}

	@Override
	public PuzzleState moveDown() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState moveLeft() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState moveRight() {
		// TODO Auto-generated method stub
		return null;
	}

}
