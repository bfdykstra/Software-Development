package edu.wm.cs.cs301.slidingpuzzle;

import java.awt.List;
import java.util.*;


import edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation;

public class BFSSolver implements PuzzleSolver {
	
	private PuzzleState initState ; //field for the initial state
	private PuzzleState goalState ; //field for the goal state
	
	public BFSSolver() {
		initState = new SimplePuzzleState();
		goalState = new SimplePuzzleState();
		
	}

	@Override
	public boolean configure(int[] initial, int[] goal) {
		// TODO Auto-generated method stub
		
		if (initial == null || goal == null) {
			return false;
		}
		
		initState.setState(initial);
		goalState.setState(goal);
		return true; //need to figure out under what circumstances false would be returned - 
		//why it would not configure correctly
	}

	@Override
	public Operation[] movesToSolve() {
		Queue<Object> toDo = new LinkedList<Object>();
		int max = this.getMaxSizeOfQueue();
		Vector known = new Vector();
		known.add(initState.getState());
		toDo.add(initState);
		
		while( !toDo.isEmpty() ){
			
			//Impossible case check
			if( toDo.size() > max){
				return null;
			}
			PuzzleState child = new SimplePuzzleState(); 
			
			PuzzleState curState = (PuzzleState) toDo.remove(); //REMOVAL
			
			if(curState.equals(goalState)){
				Operation[] returnPath = new Operation[ curState.getDistance() ];
				System.out.println("returnPath.length: " + returnPath.length);
				
				if(returnPath.length > 0){
					int lastNdx = returnPath.length - 1;
					
					System.out.println("lastNdx: " + lastNdx);
					returnPath[lastNdx] = curState.getOperation(); //last operation that was done, placed at the last ndx of the operation array
					curState = curState.getParent();
					
					while( curState.getOperation() != null){
						lastNdx = lastNdx - 1; //
						returnPath[lastNdx] = curState.getOperation();
						curState = curState.getParent();
					}
					return returnPath;
				}
				else{
					//initial was goal, so no moves are needed
					return returnPath;
				}
				
				
			}
			
			int[] board = curState.getState();
			
			// gets list of all valid moves for node
			Operation[] moves = this.validMoves(board);
			
			int op = 0;
			for(op = 0; op < moves.length; op++){
				
				Operation operation = moves[op];
				
				if(operation == Operation.MOVEUP){
					child = curState.moveUp();
					
				}
				else if(operation == Operation.MOVEDOWN){
					child = curState.moveDown();
					
				}
				else if(operation == Operation.MOVELEFT){
					child = curState.moveLeft();
					
				}
				else if(operation == Operation.MOVERIGHT){
					child = curState.moveRight();
					
				}
				
				if(! known.contains(child.getState()) ){
					known.addElement(child.getState());
					toDo.add(child);
				}
			}
		}
		return null;
	}
		
	

	@Override
	/**
	 * Gets the initial state of the puzzle
	 */
	public PuzzleState getSolverInitialState() {
		
		return initState;
	}

	@Override
	/**
	 * Gets the final desired state
	 */
	public PuzzleState getSolverFinalState() {
		
		return goalState;
	}

	@Override
	public int getNumberOfStatesExplored() {
		
		return goalState.getDistance();
	}

	@Override
	public int getMaxSizeOfQueue() {
		int n = initState.getState().length;
	    int result = 1;
	    for (int i = 1; i <= n; i++) {
	    	result = result * i;}
		return result;
	}
	
	/**
	 * Finds the zero index of a board and finds what moves are legal
	 * from that position.
	 * @param board -an integer array
	 * @return moves - an array of operations of maximum size 4
	 */
	private Operation[] validMoves(int[] board){
		
		//ZeroNdx
		int zeroNdx = 0;
		int i =0;
		for (i = 0; i < board.length; i++){
			if (board[i] == 0){
				zeroNdx = i;
			}
		}
		
		//Width
		double l = board.length;
		int width = (int) Math.sqrt(l);
		
		//ColNdx
		int col = zeroNdx % width;
		
		//RowNdx
		int row = zeroNdx/width;
		
		int x = -1;
		
		Operation[] moves = new Operation[4];
		if( 0 < row && row <= width){
			x = x + 1;
			moves[x] = Operation.MOVEUP;
		}
		
		if(0 <= row && row < (width - 1)){
			x = x + 1;
			moves[x] = Operation.MOVEDOWN;
		}
		
		if( 0 < col && col <= (width -1)){
			x = x + 1;
			moves[x] = Operation.MOVELEFT;
		}
		
		if( 0 <= col && col < (width - 1)){
			x = x + 1;
			moves[x] = Operation.MOVERIGHT;
		}
		
		return moves;
	}
	
}
