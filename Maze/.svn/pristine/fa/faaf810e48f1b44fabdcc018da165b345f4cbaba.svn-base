package falstad;

import java.util.ArrayList;
import java.util.HashSet;
import falstad.Robot.Turn;
import falstad.Robot.Direction;

public class CuriousMouse extends ManualDriver implements RobotDriver {
	
	HashSet<Integer> known;
	int[][] cellArray;
	ArrayList<Direction> dirList; 
	int[] EAST = {1, 0};
	int[] WEST = {-1, 0};
	int[] SOUTH = {0,-1};
	int[] NORTH = {0, 1};
	SingleRandom random;
	
	public CuriousMouse() {
		super();
		known = new HashSet<Integer>();
		dirList = new ArrayList<Direction>();
		dirList.add(Direction.BACKWARD);
		dirList.add(Direction.FORWARD);
		dirList.add(Direction.LEFT);
		dirList.add(Direction.RIGHT);
		random = SingleRandom.getRandom();
		
	}
	
	@Override
	public void setDimensions(int width, int height) {
		this.width = width;
		this.height = height;
		this.cellArray = new int[this.height][this.width];
		populateCellArray();
	}
	
	private void populateCellArray(){
		int num = 0;
		// (i,j) = row, column
		//width is number of colums, height is number of rows
		for(int i = 0; i < height; i++){
			for(int j = 0; j < width; j++){
				this.cellArray[i][j] = num;
				num++;
			}
		}
	}
	
	/**
	 * cycles through all possible directions and gets ones that are available to move to
	 * @return a list of directions that are possible moves
	 */
	private ArrayList<Direction> checkOptions(){
		ArrayList<Direction> possDirs = new ArrayList<Direction>();
		for(int i = 0; i < 4; i++){
			int dist = robot.distanceToObstacle(dirList.get(i));
			if(dist != 0){
				possDirs.add(dirList.get(i));
			}
		}
		return possDirs;
	}
	
	/**
	 * checks the moves to assess whether mouse has already visited cell. If the cell is not known, then it is twice as likely to be picked
	 * @return a weighted list of directions to randomly choose
	 * @throws Exception 
	 */
	private ArrayList<Direction> checkKnown(ArrayList<Direction> possMoves) throws Exception{
		ArrayList<Direction> movesToChoose = new ArrayList<Direction>();
		int[] curDir = this.robot.getCurrentDirection();
		
		//current position janx to base directions off of
		int x = this.robot.getCurrentPosition()[0];
		int y = this.robot.getCurrentPosition()[1];
		int refCell = cellArray[x][y];
		if(this.arrayEquals(curDir, EAST)){
			
			for(int i = 0; i < possMoves.size(); i++){
				//The move that will be added to choose array
				Direction move = possMoves.get(i);
				
				//check all the possible move that it could be and check if that cell is already known.
				if(move == Direction.FORWARD){
					int cell = cellArray[x+1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.LEFT){
					int cell = cellArray[x][y+1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.BACKWARD){
					int cell = cellArray[x - 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if( move == Direction.RIGHT){
					int cell = cellArray[x][y - 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				}
			}
			return movesToChoose;
		} else if(this.arrayEquals(curDir, NORTH)){
			for(int i = 0; i < possMoves.size(); i++){
				//The move that will be added to choose array
				Direction move = possMoves.get(i);
				
				//check all the possible move that it could be and check if that cell is already known.
				if(move == Direction.FORWARD){
					int cell = cellArray[x][y + 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.LEFT){
					int cell = cellArray[x - 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.BACKWARD){
					int cell = cellArray[x][y - 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if( move == Direction.RIGHT){
					int cell = cellArray[x + 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				}
			}
			return movesToChoose;
		} else if(this.arrayEquals(curDir, WEST)){
			for(int i = 0; i < possMoves.size(); i++){
				//The move that will be added to choose array
				Direction move = possMoves.get(i);
				
				//check all the possible move that it could be and check if that cell is already known.
				if(move == Direction.FORWARD){
					int cell = cellArray[x - 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.LEFT){
					int cell = cellArray[x][y - 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.BACKWARD){
					int cell = cellArray[x + 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if( move == Direction.RIGHT){
					int cell = cellArray[x][y + 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				}
			}
			return movesToChoose;
		} else if(this.arrayEquals(curDir, SOUTH)){
			for(int i = 0; i < possMoves.size(); i++){
				//The move that will be added to choose array
				Direction move = possMoves.get(i);
				
				//check all the possible move that it could be and check if that cell is already known.
				if(move == Direction.FORWARD){
					int cell = cellArray[x][y - 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.LEFT){
					int cell = cellArray[x + 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if(move == Direction.BACKWARD){
					int cell = cellArray[x][y + 1];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				} else if( move == Direction.RIGHT){
					int cell = cellArray[x - 1][y];
					if(known.contains(cell)){
						movesToChoose.add(move);
					} else{
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
						movesToChoose.add(move);
					}
				}
			}
			return movesToChoose;
		}
		return null;
	}
	
	private void randMove(Direction theMove) throws Exception{
		
		if(theMove == Direction.FORWARD){
			robot.move(1);
			this.numSteps++;
			return;
		} else if(theMove == Direction.BACKWARD){
			robot.rotate(Turn.AROUND);
			robot.move(1);
			this.numSteps++;
			return;
		} else if(theMove == Direction.LEFT){
			robot.rotate(Turn.LEFT);
			robot.move(1);
			this.numSteps++;
			return;
		} else if(theMove == Direction.RIGHT){
			robot.rotate(Turn.RIGHT);
			robot.move(1);
			this.numSteps++;
			return;
		}
	}
	
	@Override
	public boolean drive2Exit() throws Exception {
		known.add(0);
		while(! this.robot.isAtGoal()){
			

			//1. check options
			ArrayList<Direction> possMoves = this.checkOptions();
			
			//2. check known cells
			ArrayList<Direction> movesToChoose = this.checkKnown(possMoves);
			
			//3. choose a random direction out of those possible candidates
			int randNdx = random.nextIntWithinInterval(0, (movesToChoose.size() - 1) );
			
			//4. execute the randomly chosen direction
			Direction theMove = movesToChoose.get(randNdx);
			
			//need to move in that direction, based off of absolute direction		
			randMove(theMove);
			known.add(this.cellArray[this.robot.getCurrentPosition()[0]][this.robot.getCurrentPosition()[1]]);
		}
		
		goThroughExit();
		
		return true;
	}
	
	/**
	 * for use once the robot gets to the exit cell
	 * @return the direction that the exit is
	 */
	protected void goThroughExit(){
		int exitForward = robot.distanceToObstacle(Direction.FORWARD);
		int exitLeft = robot.distanceToObstacle(Direction.LEFT);
		int exitRight = robot.distanceToObstacle(Direction.RIGHT);
		int exitBackwards = robot.distanceToObstacle(Direction.BACKWARD);
		if(exitForward == Integer.MAX_VALUE){
			try {
				robot.move(1);
				this.numSteps++;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if(exitLeft == Integer.MAX_VALUE){
			try {
				robot.rotate(Turn.LEFT);
				robot.move(1);
				this.numSteps++;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} else if(exitRight == Integer.MAX_VALUE){
			try {
				robot.rotate(Turn.RIGHT);
				robot.move(1);
				this.numSteps++;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if(exitBackwards == Integer.MAX_VALUE){
			try {
				robot.rotate(Turn.AROUND);
				robot.move(1);
				this.numSteps++;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	/**
	 * tests whether two arrays are equal
	 * @param a1
	 * @param a2
	 * @return
	 */
	protected boolean arrayEquals(int[] a1, int[] a2){
		if(a1.length != a2.length){
			return false;
		}
		for(int i = 0; i < a1.length; i++){
			if( a1[i] != a2[i]){
				return false;
			}
		}
		return true;
	}


}
