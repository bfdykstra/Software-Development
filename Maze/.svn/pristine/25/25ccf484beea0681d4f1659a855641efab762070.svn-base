package falstad;


import java.util.ArrayList;

public class BasicRobot implements Robot {
	
	float battery = 2500; //holds how much battery is left in the robot
	int numSteps = 0; //the total number of steps taken
	Maze maze; //the maze that the robot is operating in
	boolean stopped;
	

	public BasicRobot() {
		
		stopped = true;
	}

	@Override
	public void rotate(Turn turn) throws Exception {
		
		if(this.battery - 3 > 0){
			
			switch(turn){
			case LEFT:
				this.maze.rotate(1);
				System.out.println("turned left, now facing: " + maze.dx + " " + maze.dy);
				break;
			case RIGHT:
				maze.rotate(-1);
				System.out.println("turned right, now facing: " + maze.dx + " " + maze.dy);
				//this.maze.keyDown(108);
				break;
			case AROUND:
				System.out.println("In Around:");
				maze.rotate(1);
				System.out.println("first turn left, now facing: " + maze.dx + " " + maze.dy);
				maze.rotate(1);
				System.out.println("Second turn left, now facing: " + maze.dx + " " + maze.dy);
				break;
			}
			this.battery = this.battery - 3;
		} else{
			System.out.println("Battery went below 0; not allowed");
			throw new Exception();
			
		}
	}

	@Override
	public void move(int distance) throws Exception {
		
		for(int i = 0; i < distance; i++){
			//checks to see if forward direction has a wall in front of it
			boolean canGo = maze.checkMove(1);
			if((battery - 5 > 0) && canGo){
				stopped = false;
				this.maze.walk(1); //won't move backwards which would be -1
				battery = battery -5;
				numSteps++;
				
			}
			else{
				stopped = true;
				System.out.println("Moving would cause battery to go below 5. Current battery level: " + battery 
						+ " or, cannot move this way");
				throw new Exception();
			}
		}
		stopped = true;

	}
	
	
	/**
	 * returns the direction relative to the robot of the location of walls
	 * @param curDir
	 */
	public ArrayList<Direction> sensor(int[] curDir){
		
		int[] EAST = {1, 0};
		int[] WEST = {-1, 0};
		int[] SOUTH = {0,-1};
		int[] NORTH = {0, 1};
		ArrayList<Direction> dirList = new ArrayList<Direction>();
		if(this.arrayEquals(EAST, curDir) ){
			//left
			if(maze.mazecells.hasWallOnBottom(maze.px, maze.py)){
				//boolean left = maze.mazecells.hasWallOnLeft(maze.px, maze.py);
				dirList.add(Direction.LEFT);
			}
			//right
			if(maze.mazecells.hasWallOnTop(maze.px, maze.py)){
				//boolean right = maze.mazecells.hasWallOnLeft(maze.px, maze.py);
				dirList.add(Direction.RIGHT);
			}
			//forward
			if(maze.mazecells.hasWallOnRight(maze.px, maze.py)){
				//boolean front = maze.mazecells.hasWallOnTop(maze.px, maze.py);
				dirList.add(Direction.FORWARD);
			}
			return dirList;
		}
		else if(this.arrayEquals(WEST, curDir) ){
			//left
			if(maze.mazecells.hasWallOnTop(maze.px, maze.py)){
				dirList.add(Direction.LEFT);
			}
			//right
			else if(maze.mazecells.hasWallOnBottom(maze.px, maze.py)){
				dirList.add(Direction.RIGHT);
			}
			//front
			else if(maze.mazecells.hasWallOnLeft(maze.px, maze.py)){
				dirList.add(Direction.FORWARD);
			}
			return dirList;
		}
		else if(this.arrayEquals(SOUTH, curDir)){
			//left
			if(maze.mazecells.hasWallOnRight(maze.px, maze.py)){
				dirList.add(Direction.RIGHT);
			}
			//right
			else if(maze.mazecells.hasWallOnLeft(maze.px, maze.py)){
				dirList.add(Direction.LEFT);
			}
			//front
			else if(maze.mazecells.hasWallOnTop(maze.px, maze.py)){
				dirList.add(Direction.FORWARD);
			}
			return dirList;
		}
		else if(this.arrayEquals(NORTH, curDir)){
			//left
			if(maze.mazecells.hasWallOnLeft(maze.px, maze.py)){
				dirList.add(Direction.LEFT);
			}
			//right
			else if(maze.mazecells.hasWallOnRight(maze.px, maze.py)){
				dirList.add(Direction.RIGHT);
			}
			//front
			else if(maze.mazecells.hasWallOnBottom(maze.px, maze.py)){
				dirList.add(Direction.FORWARD);
			}
			return dirList;
		}
		return null;
		
	}

	@Override
	public int[] getCurrentPosition() {
		
		
			int[] curPosition = {this.maze.px, this.maze.py};
			return curPosition;
	}

	@Override
	public void setMaze(Maze maze) {
		
		this.maze = maze;

	}

	@Override
	public boolean isAtGoal() {
		
		int x = maze.px;
		int y = maze.py;
		boolean check = this.maze.mazecells.isExitPosition(x, y);
		System.out.println("THIS IS THE ISATGOAL CHECK" + check);
		if(this.maze.mazecells.isExitPosition(maze.px, maze.py)){
			return true;
		}
		return false;
	}

	@Override
	public boolean canSeeGoal(Direction direction) throws UnsupportedOperationException {
		int[] curDir = this.getCurrentDirection();
		int[] curPos = this.getCurrentPosition();
		int[] EAST = {1, 0};
		int[] WEST = {-1, 0};
		int[] SOUTH = {0,-1};
		int[] NORTH = {0, 1};
		boolean canSee = false;
		
		if(this.arrayEquals(curDir, EAST)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				//boolean canSee = false;
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, 1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX + 1, tempY)){
						canSee = true;
					}
					tempX ++;
				}
				return canSee;
				
			case RIGHT:
				//tracks downward
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, -1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY - 1)){
						canSee = true;
					}
					tempY--;
				}
				return canSee;
				
			case LEFT:
				//tracks up
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, 1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY + 1)){
						canSee = true;
					}
					tempY++;
				}
				return canSee;
				
			case BACKWARD:
				//tracks down
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, -1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX - 1, tempY)){
						canSee = true;
					}
					tempX --;
				}
				return canSee;
				
			}
		}else if(this.arrayEquals(curDir, WEST)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			canSee = false;
			switch(direction){
			case FORWARD:
				//tracks forward
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, -1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX - 1, tempY)){
						canSee = true;
					}
					tempX --;
				}
				return canSee;
				
			case RIGHT:
				//tracks downward
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, 1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY + 1)){
						canSee = true;
					}
					tempY++;
				}
				return canSee;
				
			case LEFT:
				//tracks up
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, -1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY - 1)){
						canSee = true;
					}
					tempY--;
				}
				return canSee;
				
			case BACKWARD:
				//tracks down
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, 1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX + 1, tempY)){
						canSee = true;
					}
					tempX ++;
				}
				return canSee;
				
			}
		}else if(this.arrayEquals(curDir, SOUTH)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, -1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY - 1)){
						canSee = true;
					}
					tempY--;
				}
				return canSee;
				
			case RIGHT:
				//tracks downward
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, -1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX - 1, tempY)){
						canSee = true;
					}
					tempX --;
				}
				return canSee;
				
			case LEFT:
				//tracks up
				while((!canSee) && (maze.mazecells.canGo(tempX, tempY, 1, 0)) ){
					if(this.maze.mazecells.isExitPosition(tempX + 1, tempY)){
						canSee = true;
					}
					tempX ++;
				}
				return canSee;
				
			case BACKWARD:
				//tracks down
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, 1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY + 1)){
						canSee = true;
					}
					tempY++;
				}
				return canSee;
				
			}
			
		}else if(this.arrayEquals(curDir, NORTH)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			
			
			switch(direction){
			case FORWARD:
				//tracks forward
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, 1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY + 1)){
						canSee = true;
					}
					tempY++;
				}
				return canSee;
				
			case RIGHT:
				//tracks downward
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 1, 0))){
					if(this.maze.mazecells.isExitPosition(tempX + 1, tempY)){
						canSee = true;
					}
					tempX ++;
				}
				return canSee;
				
			case LEFT:
				//tracks up
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, -1, 0))){
					if(this.maze.mazecells.isExitPosition(tempX - 1, tempY)){
						canSee = true;
					}
					tempX --;
				}
				return canSee;
				
			case BACKWARD:
				//tracks down
				while( (!canSee) && (maze.mazecells.canGo(tempX, tempY, 0, -1))){
					if(this.maze.mazecells.isExitPosition(tempX, tempY - 1)){
						canSee = true;
					}
					tempY--;
				}
				return canSee;
			}
		}
		return false;
	}

	@Override
	public boolean isInsideRoom() throws UnsupportedOperationException {
		
		if(this.maze.mazecells.isInRoom(maze.px, maze.py)){
			return true;
		}
		return false;
	}

	@Override
	public boolean hasRoomSensor() {
		
		return true;
	}

	@Override
	public int[] getCurrentDirection() {
		
		int[] curDir = {this.maze.dx, this.maze.dy};
		return curDir;
	}

	@Override
	public float getBatteryLevel() {
		
		return this.battery;
		
	}

	@Override
	public void setBatteryLevel(float level) {
		
		this.battery = level;

	}

	@Override
	public float getEnergyForFullRotation() {
		
		return 6;
	}

	@Override
	public float getEnergyForStepForward() {
		
		return 5;
	}

	@Override
	public boolean hasStopped() {
		
		return stopped;
	}

	@Override
	public int distanceToObstacle(Direction direction) {
		
		int[] curDir = this.getCurrentDirection();
		int[] curPos = this.getCurrentPosition();
		int[] EAST = {1, 0};
		int[] WEST = {-1, 0};
		int[] SOUTH = {0,-1};
		int[] NORTH = {0, 1};
		int dist = 0;
		
		if(this.arrayEquals(curDir, EAST)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				while(this.maze.mazecells.hasNoWallOnRight(tempX, tempY)){
					tempX++;
					dist++;
				}
				return dist;
			case RIGHT:
				//tracks downward
				while(this.maze.mazecells.hasNoWallOnTop(tempX, tempY)){
					tempY--;
					dist++;
				}
				return dist;
			case LEFT:
				//tracks up
				while(this.maze.mazecells.hasNoWallOnBottom(tempX, tempY)){
					tempY++;
					dist++;
				}
				return dist;
			case BACKWARD:
				//tracks down
				while(this.maze.mazecells.hasNoWallOnLeft(tempX, tempY)){
					tempX--;
					dist++;
				}
				return dist;
				
			}
		}else if(this.arrayEquals(curDir, WEST)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				while(this.maze.mazecells.hasNoWallOnLeft(tempX, tempY)){
					tempX--;
					dist++;
				}
				return dist;
			case RIGHT:
				//tracks downward
				while(this.maze.mazecells.hasNoWallOnBottom(tempX, tempY)){
					tempY++;
					dist++;
				}
				return dist;
			case LEFT:
				//tracks up
				while(this.maze.mazecells.hasNoWallOnTop(tempX, tempY)){
					tempY--;
					dist++;
				}
				return dist; //may have to be dist -1
			case BACKWARD:
				//tracks down
				while(this.maze.mazecells.hasNoWallOnRight(tempX, tempY)){
					tempX++;
					dist++;
				}
				return dist;
				
			}
		}else if(this.arrayEquals(curDir, SOUTH)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				while(this.maze.mazecells.hasNoWallOnTop(tempX, tempY)){
					tempY--;
					dist++;
				}
				return dist;
			case RIGHT:
				//tracks downward
				while(this.maze.mazecells.hasNoWallOnLeft(tempX, tempY)){
					tempX--;
					dist++;
				}
				return dist;
			case LEFT:
				//tracks up
				while(this.maze.mazecells.hasNoWallOnRight(tempX, tempY)){
					tempX++;
					dist++;
				}
				return dist; //may have to be dist -1
			case BACKWARD:
				//tracks down
				while(this.maze.mazecells.hasNoWallOnBottom(tempX, tempY)){
					tempY++;
					dist++;
				}
				return dist;
				
			}
			
		}else if(this.arrayEquals(curDir, NORTH)){
			int tempX = curPos[0];
			int tempY = curPos[1];
			switch(direction){
			case FORWARD:
				//tracks forward
				while(this.maze.mazecells.hasNoWallOnBottom(tempX, tempY)){
					tempY++;
					dist++;
				}
				return dist;
			case RIGHT:
				//tracks downward
				while(this.maze.mazecells.hasNoWallOnRight(tempX, tempY)){
					tempX++;
					dist++;
				}
				return dist;
			case LEFT:
				//tracks up
				while(this.maze.mazecells.hasNoWallOnLeft(tempX, tempY)){
					tempX--;
					dist++;
				}
				return dist; //may have to be dist -1
			case BACKWARD:
				//tracks down
				while(this.maze.mazecells.hasNoWallOnTop(tempX, tempY)){
					tempY--;
					dist++;
				}
				return dist;
			}
		}
		return 0;
	}

	@Override
	public boolean hasDistanceSensor(Direction direction) {
		
		return true;
	}
	
	
	/**
	 * tests whether two arrays are equal
	 * @param a1
	 * @param a2
	 * @return
	 */
	protected boolean arrayEquals(int[] a1, int[] a2){
		if(a1.length != a2.length){
			return false;
		}
		for(int i = 0; i < a1.length; i++){
			if( a1[i] != a2[i]){
				return false;
			}
		}
		return true;
	}

}
