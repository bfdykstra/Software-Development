import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Random;

//From an array of numbers, count how many times a number appears in an array. Count how many times EACH number appears

public class repeatNumbers {
	
	public static int countArray(int[] array, int theNumber){
		//Hashtable<Integer, Integer> table = new Hashtable<Integer, Integer>();
		int count = 0;
		for(int i = 0; i < array.length; i++){
			
			if( array[i] == theNumber){
				count++;
			}
			/*
			Integer val = table.get(array[i]); //get the number of times the integer has been seen before
			//if the value is not yet in the table, will return null. 
			if(val != null){
				table.put(array[i], val++);
			}else{
				table.put(array[i], 1);
			}*/
		}
		
		return count;
	}
	
	public static Hashtable<Integer, Integer> allCount(int[] array){
		Hashtable<Integer, Integer> table = new Hashtable<Integer, Integer>();
		for(int i = 0; i < array.length; i++){
			Integer val = table.get(array[i]); //get the number of times the integer has been seen before
			//if the value is not yet in the table, will return null. 
			if(val != null){
				
				table.put(array[i], val + 1);
			}else{
				table.put(array[i], 1);
			}
		}
		
		return table;
	}
	
	public ArrayList<Integer> getPrimes(int[] array){
		ArrayList<Integer> nums = new ArrayList<Integer>();
		nums.add(2);
		Boolean[] a = new Boolean[1001];
		Arrays.fill(a, Boolean.TRUE);
		for(int i = 2; i*i <= 1000; i++){
			if(a[i] == true){
				for(int j = i; i*j <= 1000; j++ ){
					a[i*j] = false;
				}
			}
		}
		
		//count primes
		int primes = 0;
		for(int i = 2; i <= 1000; i ++){
			if(a[i]){
				nums.add(i);
				primes++;
			}
		}
		System.out.println("The number of primes <= " + 1000 + " is " + primes);
		return nums;
	}
	
	
	//method to reverse a character array
	public static char[] reverseStr(char[] str){
		char[] revStr = new char[str.length];
		for(int i = 0; i < str.length; i++){
			//i will be index, add length minus i to i for other index to switch
			revStr[i] = str[(str.length - 1) - i];
		}
		return revStr;
	}
	
	public static int[] shuffleDeck( int[] deck){
		
		Random r = new Random();
		int[] shuffledDeck = new int[52];
		boolean[] known = new boolean[52]; //to check if card has been inserted at index

		//Hashtable<Integer, Boolean> known = new Hashtable<Integer, Boolean>(); //hashtable 

		//randomly choose index between 0 and 51, insert "card" at that index -- need to handle if there is a repeat though

		//what if there is a repeat index? redo selection until index that has not been chosen is selected
		for(int i = 0; i < 52; i++){
			
			int randNdx = r.nextInt(52); //think that is the syntax
			//check if randNdx is in known
			if(! known[randNdx]){
				shuffledDeck[i] = deck[randNdx];
				known[randNdx] = true;
			}else{
				boolean flag = true;
				while(flag){
					int newRand = r.nextInt(52);
					if(!known[newRand]){
						shuffledDeck[i] = deck[newRand];
						known[newRand] = true;
						flag = false;
					}
				}
			}

		}
		return shuffledDeck;
	}

	public static void main(String[] args) {
		int[] passArray = {1,2,3,4,3,5,9,1,1,2};
		int theNumber = 5;
		int numberOfTimes = countArray(passArray, theNumber); // should be equal to 3
		System.out.print(numberOfTimes);
		Hashtable<Integer, Integer> totalCount = allCount(passArray);
		
		char[] charStr = {'a', 'b', 'c', 'd', 'e'};
		char[] reversedStr = reverseStr(charStr);
		System.out.println("reversed String: " );
		for(int i = 0; i< reversedStr.length; i++){
			System.out.print(reversedStr[i] + ", ");
		}
		
		int[] deck = new int[52];
		for(int j = 0; j < 52; j++){
			deck[j] = j;
		}
		
		int[] shuffled = shuffleDeck(deck);
		System.out.println();
		for(int i = 0; i < 52; i++){
			System.out.print(shuffled[i] + ", ");
		}
		
		//some test code for shuffleDeck
		int count = 0;
		for(int i = 0; i< 52; i++){
			
			if(shuffled[i] == 1){
				count++;
			}
			
		}
		System.out.println(count);
		
	}
	

}
